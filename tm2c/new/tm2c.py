from context import *
from parse import *
import sys
# this file is auto-generated by gen_tm2c.py

def visit_arg(item, context):
    ref = item.first.val
    context.push(ref, sformat("Object %s=arg_take_obj(\"test\");", ref));


def visit_assignment(item, context):
    # temp_size = context.get_temp_size()
    
    first = item.first
    second = item.second
    if istype(first, 'list'):
        # multiple assignment
        assert len(first) == len(second)
        for i in range(len(first)):
            node = AstNode('=')
            node.first = first[i]
            node.second = second[i]
            visit_assignment(node, context)
    elif first.type == "name":
        visit_item(item.second, context)
        name = first.val
        # ref, val = context.pop()
        # context.push(name, sformat("%s=%s", name, val))
        context.store(name)
        # context.restore_temp_size(temp_size)
    else:
        # handle set, multi-assignment, etc.
        pass



def visit_call(item, context):
    first = item.first
    second = item.second
    visit_item(first, context)
    func_ref, val = context.pop()
    if func_ref == None:
        func_ref = context.get_temp(val)
    if istype(second, "list"):
        arg_list = []
        for item in second:
            visit_item(item, context)
            ref, val = context.pop()
            if ref == None:
                ref = context.get_temp(val)
            arg_list.append(ref)
        context.push(None, sformat("tm_call(%s,%s,%s,%s);", \
            get_line_no(item), func_ref, len(arg_list), ",".join(arg_list)))
    elif second == None:
        context.push(None, sformat("tm_call(%s,%s,0);", get_line_no(item), func_ref))
    else:
        visit_item(second, context)
        ref, val = context.pop()
        if ref == None:
            ref = context.get_temp(val)
        context.push(None, sformat("tm_call(%s,%s,1,%s);", get_line_no(item), func_ref, ref))







def visit_def(item, context):
    origin_name = item.first.val
    
    context.push ("##", "#func")
    
    # visit_item(item.first, context)
    name = context.get_var(origin_name)
    # ref, name = context.pop()
    context.push(None, "Object " + name + "() {")
    context.switch_to_scope("local")
    visit_item(item.second, context)
    visit_item(item.third, context)
    context.push(None, "}\n")
    context.switch_to_scope("global")
    
    code = context.pop()
    function_code = []
    
    while not (code[0] == "##" and code[1] == "#func"):
        function_code.append(code)
        code = context.pop()
    function_code.append([None, "/* function " + origin_name + " */"])
    function_code.reverse()
    context.define_function(origin_name, function_code)
    context.push(None, sformat("def_func(%s, %s, %s);",
        context.get_globals(), context.get_string(origin_name), name))









def visit_if (item, context):
    # { first : condition, second : body, third : rest }
    condition = item.first
    body = item.second
    rest = item.third

    visit_item(condition, context)

    ref, val = context.pop()

    if ref == None:
        ref = context.get_temp(val)

    context.push (None, sformat("if (is_true(%s)) { ", ref))

    visit_item(body, context)

    context.push (None, "}")

    if rest != None:
        context.push(None, "else { ")
        visit_item(rest, context)
        context.push(None, "}")







def visit_name(item, context):
    if context.scope == "global":
        # ref = context.get_var(item.val)
        context.push(None, sformat("tm_get_global(%s, %s)", context.get_globals(), context.get_string(item.val)))
    else:
        context.push(item.val, item.val)



def visit_op(item, context, op):
    visit_item(item.first, context)
    visit_item(item.second, context)
    name2, v2 = context.pop()
    name1, v1 = context.pop()
    if name1 == None:
        name1 = context.get_temp(v1)
    if name2 == None:
        name2 = context.get_temp(v2)
    context.push(None, sformat("%s(%s, %s)", op, name1,name2))

def visit_add(item, context):
    visit_op(item, context, "obj_add")

def visit_sub(item, context):
    visit_op(item, context, "obj_sub")

def visit_mul(item, context):
    visit_op(item, context, "obj_mul")

def visit_div(item, context):
    visit_op(item, context, "obj_div")

def visit_mod(item, context):
    visit_op(item, context, "obj_mod")



def visit_return(item, context):
    visit_item(item.first, context)
    ref, val = context.pop()
    context.push(None, "return " + val + ";")






def visit_number(item, context):
    ref = context.get_number(item.val)
    context.push(ref, ref)

def visit_string(item, context):
    ref = context.get_string(item.val)
    context.push(ref, ref)

def visit_none(item, context):
    context.push("NONE_OBJ", "NONE_OBJ")

    






def get_line_no(item):
    if hasattr(item, "pos"):
        return item.pos[0]
    elif hasattr(item, "first"):
        return get_line_no(item.first)


_handlers = {
    "number": visit_number,
    "name":   visit_name,
    "string": visit_string,
    "None": visit_none,
    "=" : visit_assignment,
    "+" : visit_add,
    "if": visit_if,
    "call": visit_call,
    "def": visit_def,
    "arg": visit_arg,
    "return": visit_return
}

def visit_item0(item, context):
    _handlers[item.type](item, context)

def visit_item(item, context):
    context.item = item
    if istype(item, "list"):
        for item0 in item:
            visit_item(item0, context)
    else:
        visit_item0(item, context)

def visit_item_list(item_list, context):
    for item in item_list:
        temp_size = context.get_temp_size()
        visit_item(item, context)
        context.restore_temp_size(temp_size)


def tm2c(fname, src, prefix=None):
    tree = parse(src)
    # print_ast(tree)
    context = Context()
    context.set_fname(prefix)
    visit_item_list(tree, context)
    return context.get_code()
    
if __name__ == "__main__":
    name = sys.argv[1]
    # path = "../test/tm2c/" + name
    path = name
    text = load(path)
    pathes = path.split('/')
    if len(pathes) > 1:
        name = pathes[-1]
    mod = name.split(".")[0]
    code = tm2c(name, text, mod)
    print(code)


