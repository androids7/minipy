import os
import codecs

def readFile(path):
    try:
        fp = open(path, encoding="utf-8")
        content = fp.read()
        fp.close()
        return content
    except:
        fp = open(path, encoding="gbk")
        content = fp.read()
        fp.close()
        return content

def writeFile(path, content):
    fp = open(path, "wb")
    buffer = codecs.encode(content, "utf-8")
    fp.write(buffer)
    fp.close()
    return content

def gen_tm2c_py():
    dirname = "visitors"

    files = os.listdir(dirname)

    blacklist = ["gen_tm2c.py", "tm2c.py", "common.py"]

    head = "from context import *\n"
    head += "from parse import *\n"
    head += "import sys\n"
    head += "# this file is auto-generated by gen_tm2c.py\n"

    content = head;

    for fname in files:
        if not fname.endswith(".py"):
            continue
        elif fname in blacklist:
            continue
        fname = os.path.join(dirname, fname)
        name = fname.split(".")[0]

        content += readFile(fname)
        content += "\n"

    content += readFile("common.py")
    
    writeFile("tm2c.py", content)

def gen_tm2c_c():
    h_file_list = ["instruction.h", "object.h", "tm.h"]
    c_file_list = ['gc.c', 'string.c', 'list.c', 'dict.c', 'function.c', 'number.c', 'tmarg.c', 'util.c', 'ops.c', 'vm.c', 'exception.c', 'builtins.c']
    content = ""
    
    for name in h_file_list:
        content += readFile("../src/include/" + name)
    
    for name in c_file_list:
        content += readFile("../src/" + name)
    writeFile("tm2c.c", content)
        

if __name__ == '__main__':
    gen_tm2c_py()
    # gen_tm2c_c()