from boot import *
cheader = '''/*
* @author xupingmao<578749341@qq.com>
* @generated by Python
* @date %s
*/
#ifndef INSTRUCTION_H_
#define INSTRUCTION_H_
'''
ctail = "\n#endif\n\n"

_opcode_names = [
    'NEW_STRING', 
    'NEW_NUMBER',

    "OP_IMPORT",

    'ADD', 
    'SUB', 
    'MUL', 
    'DIV', 
    'MOD', 
    'NEQ',
    'GT', 
    'LT', 
    'GTEQ', 
    'LTEQ', 
    'EQEQ', 
    'NOTEQ', 
    'OP_IN', 
    'NOTIN',
    'OP_AND', 
    'OP_OR', 
    'SET', 
    'GET',
    # byte r, byte a, byte b
    # 
    'NOT', # byte a, byte b
    'MOV', # byte a, byte b
    'NEG',
    'LISTAPPEND', # byte list, byte value


    'LD_NONE',
    'LIST', # byte r, short 0
    'DICT', # byte r, short 0

    'SETG', # short const, byte r


    'LD_CONST', # byte r, short const
    'GETG',  # byte r, short const
    'JF',    # byte r, short label
    


    'TM_LINE',
    'JMP',    # short label, byte 0
    'UP_JMP', # short label, byte 0
    

    

    'CALL0',
    'CALL1',
    'CALL2',
    "CALL3",
    "CALL4",
    "CALL5",
    "RET",
    'TM_DEF',
    'NARG',

    'POP_JUMP_ON_FALSE', 
    'JUMP_ON_FALSE', 
    'JUMP_ON_TRUE',
    #TAGSIZE
    'TM_UNARRAY', 'TM_ROT', 'TM_DEL', 'TM_FOR', 'TM_NEXT', 'ITER_NEW', 'LOAD_EX',
    'SETJUMP', 'CALL', 'RETURN', 'LOAD_PARAMS', 'TM_NARG', 'TM_EOF',
    "CLRJUMP",
    'TM_EOP',
    # mulity assignment, eg. x,y = 1,2
    'TM_DEBUG',
    
    'TAG', 
    # instructions for vm to optimize.
    'FAST_ST_GLO',
    'FAST_LD_GLO',
    # unused instructions
    #'LT_JUMP_ON_FALSE', 
    #'GT_JUMP_ON_FALSE',
    #'LTEQ_JUMP_ON_FALSE',
    #'GTEQ_JUMP_ON_FALSE',
    #'EQEQ_JUMP_ON_FALSE',
    #'NOTEQ_JUMP_ON_FALSE',
]

# update global values.
i = 0
tmcodes = {}
while i < len(_opcode_names):
    name = _opcode_names[i]
    globals()[name] = i + 1
    tmcodes[i+1] = name
    # print(name, '=', i + 1)
    i += 1

def export_clang_define(des, self = None):
    # check modified time
    # if src is modified before des and cdes, do not convert.
    if self == None:
        self = ARGV[0]
    if not exists(des):
        pass
    elif mtime(self) < mtime(des):
        return
    defines = []
    i = 0
    while i < len(_opcode_names):
        x = _opcode_names[i]
        defines.append('#define '+ x + ' ' + str(i+1))
        i += 1
    ctext = cheader % str(asctime()) + '\n'.join(defines) + ctail
    save(des, ctext)
    # save('../include/instruction.h', ctext)

if __name__ == '__main__':
    export_clang_define('instruction.h')